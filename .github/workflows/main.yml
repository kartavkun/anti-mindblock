name: Build with Nuitka and Create Beta Pre-Release

on:
  push:
    branches:
      - dev

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.8'  # Укажите версию Python, которую вы используете

    - name: Install Nuitka
      run: pip install nuitka

    - name: Build with Nuitka
      run: nuitka --standalone --onefile --output-dir=build main.py

    - name: Upload build artifacts
      uses: actions/upload-artifact@v2
      with:
        name: build
        path: build/

    - name: Get next Beta version
      id: get_version
      run: |
        # Получаем последний релиз с тегом Beta
        LATEST_BETA=$(gh release list --limit 1 --exclude-drafts --exclude-pre-releases | grep "Beta" | awk '{print $3}')
        if [ -z "$LATEST_BETA" ]; then
          echo "No existing Beta release found. Starting with v0.0.1"
          echo "::set-output name=version::0.0.1"
        else
          # Увеличиваем версию на 1 (например, 0.0.1 -> 0.0.2)
          MAJOR=$(echo $LATEST_BETA | cut -d. -f1)
          MINOR=$(echo $LATEST_BETA | cut -d. -f2)
          PATCH=$(echo $LATEST_BETA | cut -d. -f3)
          NEW_PATCH=$((PATCH + 1))
          NEW_VERSION="$MAJOR.$MINOR.$NEW_PATCH"
          echo "New Beta version: $NEW_VERSION"
          echo "::set-output name=version::$NEW_VERSION"
        fi

    - name: Create Beta Pre-Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Токен для доступа к GitHub API
      with:
        tag_name: "Beta ${{ steps.get_version.outputs.version }}"  # Создаем тег с новым номером версии
        release_name: "Beta ${{ steps.get_version.outputs.version }}"
        draft: false
        prerelease: true  # Пометить как пре-релиз (Beta)
        body: |
          Автоматически созданный пре-релиз для тега Beta ${{ steps.get_version.outputs.version }}.
          Собранный билд доступен ниже.

    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./build/main.bin  # Укажите путь к вашему собранному файлу
        asset_name: main.bin  # Имя файла в релизе
        asset_content_type: application/octet-stream
